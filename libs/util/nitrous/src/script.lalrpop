// This file is part of Nitrogen.
//
// Nitrogen is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Nitrogen is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Nitrogen.  If not, see <http://www.gnu.org/licenses/>.
use crate::ir::{Term, Expr, Operator, Stmt};
use std::str::FromStr;

grammar;

Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Semicolon<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

AddOp: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Subtract,
};

MulOp: Operator = {
    "*" => Operator::Multiply,
    "/" => Operator::Divide,
};

SymbolOrBool: Term = r"[_a-zA-Z][_a-zA-Z0-9]*" => {
    if <> == "True" {
        Term::Boolean(true)
    } else if <> == "False" {
        Term::Boolean(false)
    } else {
        Term::Symbol(<>.to_owned())
    }
};
AtSymbol: Term = r"@[_a-zA-Z][_a-zA-Z0-9]*" => {
    Term::AtSymbol(<>[1..].to_owned())
};
DoubleQuotedString: Term = r#""[^"]*""# => Term::String(<>[1..<>.len() - 1].to_owned());
SingleQuotedString: Term = r"'[^']*'" => Term::String(<>[1..<>.len() - 1].to_owned());
Integer: Term = r"[0-9]+" => Term::Integer(i64::from_str(<>).unwrap());
Float: Term = r"[+-]?[0-9]+[.]([0-9]*)?" => Term::Float(f64::from_str(<>).unwrap().into());

Term: Term = {
    AtSymbol,
    SymbolOrBool,
    DoubleQuotedString,
    SingleQuotedString,
    Float,
    Integer,
};

pub Statements: Vec<Box<Stmt>> = {
    Semicolon<Statement>
}

Statement: Box<Stmt> = {
    LetAssignStmt,
    Expr => Box::new(Stmt::Expr(<>)),
}

LetAssignStmt: Box<Stmt> = {
    "let" <SymbolOrBool> ":=" <Expr> => Box::new(Stmt::LetAssign(<>)),
}

Expr: Box<Expr> = {
    AssignExpr
};

AssignExpr: Box<Expr> = {
    <tgt:SymbolOrBool> ":=" <expr:AddExpr> => Box::new(Expr::Assign(<>)),
    AddExpr
};

AddExpr: Box<Expr> = {
    AddExpr AddOp MulExpr => Box::new(Expr::BinOp(<>)),
    MulExpr
};

MulExpr: Box<Expr> = {
    MulExpr MulOp AwaitExpr => Box::new(Expr::BinOp(<>)),
    AwaitExpr
};

AwaitExpr: Box<Expr> = {
    "await" <CallExpr> => Box::new(Expr::Await(<>)),
    CallExpr
}

CallExpr: Box<Expr> = {
    <CallExpr> "(" <Comma<Expr>> ")" => Box::new(Expr::Call(<>)),
    AttrExpr
}

AttrExpr: Box<Expr> = {
    <AttrExpr> "." <SymbolOrBool> => Box::new(Expr::Attr(<>)),
    <AttrExpr> "." <SymbolOrBool> ":=" <TermExpr> => Box::new(Expr::AssignAttr(<>)),
    TermExpr
}

TermExpr: Box<Expr> = {
    Term => Box::new(Expr::Term(<>)),
    "(" <Expr> ")",
}
