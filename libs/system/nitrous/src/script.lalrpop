// This file is part of Nitrogen.
//
// Nitrogen is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Nitrogen is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Nitrogen.  If not, see <http://www.gnu.org/licenses/>.
use crate::ir::{Term, Expr, Operator};
use std::str::FromStr;

grammar;

Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

AddOp: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Subtract,
};

MulOp: Operator = {
    "*" => Operator::Multiply,
    "/" => Operator::Divide,
};

Symbol: Term = r"[_a-zA-Z][_a-zA-Z0-9]*" => Term::Symbol(<>.to_owned());
DoubleQuotedString: Term = r#""[^"]*""# => Term::String(<>[1..<>.len() - 1].to_owned());
SingleQuotedString: Term = r"'[^']*'" => Term::String(<>[1..<>.len() - 1].to_owned());
Integer: Term = r"[0-9]+" => Term::Integer(i64::from_str(<>).unwrap());
Float: Term = r"[+-]?[0-9]+[.]([0-9]*)?" => Term::Float(f64::from_str(<>).unwrap().into());
// BooleanTrue: Term = r"True" => Term::Boolean(true);
// BooleanFalse: Term = r"False" => Term::Boolean(false);

Term: Term = {
    Symbol,
    DoubleQuotedString,
    SingleQuotedString,
    Float,
    Integer,
    "(" <Term> ")",
};

pub Expr: Box<Expr> = {
    CallExpr
};

CallExpr: Box<Expr> = {
    <CallExpr> "(" <Comma<CallExpr>> ")" => Box::new(Expr::Call(<>)),
    AttrExpr
}

AttrExpr: Box<Expr> = {
    <AttrExpr> "." <Symbol> => Box::new(Expr::Attr(<>)),
    MulExpr
}

MulExpr: Box<Expr> = {
    MulExpr MulOp AddExpr => Box::new(Expr::BinOp(<>)),
    AddExpr
};

AddExpr: Box<Expr> = {
    AddExpr AddOp TermExpr => Box::new(Expr::BinOp(<>)),
    TermExpr
};

TermExpr: Box<Expr> = {
    Term => Box::new(Expr::Term(<>))
}
